****************************************************************
          型レベル評価を用いたML多相型システムの拡張

                                      （株）システム計画研究所
                                 服部　健太<hattori@isp.co.jp>
****************************************************************

【概要】

Hindley-Milnerの多相型システムは，ML, OCaml, Haskellなど数多くの関数型
プログラミング言語の型システムの理論的基礎として広く用いられている．し
かし，現実的なプログラミング言語では，レコード型や演算子の多重定義など
の機能を提供する必要があり，HM多相型システムに対して様々な拡張が提案さ
れ実装されてきた．例えば，大堀の多相型レコード理論を実装したSML#，
Wadlerの型クラス機構によって多重定義を可能にしたHaskellなどがある．こ
れらは，ある種の制約を表現できるような型変数を導入した上で，その制約を
解くために単一化アルゴリズムを拡張するというような手法ととらえることが
できる．本稿では，このような手法とは異なり，型レベル評価というシンプル
な機構を用いる手法を提案する．提案手法では，HM型システムに対する様々な
拡張を統一的，かつ簡単に提供することが可能となる．


1.【はじめに】==================================================

本提案手法では，型推論は以下のように2つのフェーズから構成される．

1) Milnerの型推論アルゴリズムWにもとづく型推論を行いながら，もともとの
   λ式に型注釈をつけていく．また，多相型を持つ式については型抽象に，
   多相型変数の具現化は型適用に変換を行う．なお，この段階での型推論は
   不完全であってもよい．

2) 型注釈付きのλ式の型適用について，評価を行う．このとき，必要に応じ
   て単一化を行うことで，残りの部分の型の推論や型エラーの検出を行う．


2.【Core-MLとCore-XML】=========================================

(Core-MLの構文)

 τ ::= t | β | τ -> τ     --- 単相型
 σ ::= τ|∀t.σ             --- 型スキーマ
 M,N ::= c                    --- 項
       | x
       | M N
       | \x.M
       | let x = M in E

(Core-XMLの構文)

 τ ::= t | β | τ -> τ     --- 単相型
 σ ::= τ|Πt.σ             --- 型スキーマ
 E,F ::= c                    --- 項
       | x
       | E F
       | \x:τ.E
       | E <τ>
       | \<t>.E
       | let x:σ = E in F

(Core-MLからCore-XMLへの変換規則)

Γ |- M ⇒ E: σ

      x:σ∈Γ
-------------------                                (VAR)
 Γ |- x ⇒ x : σ

     Γ |- M ⇒ E : σ     t∈FTV(σ)-FTV(Γ) 
----------------------------------------------     (TABS)
 Γ |- M ⇒ \<t>.E : Πt.σ

     Γ |- M ⇒ E : Πt.σ
-------------------------------                    (TAPP)
 Γ |- M ⇒ E <τ> : σ[t:=τ]

    Γ{x:τ} |- M ⇒ E : τ'
---------------------------------                  (ABS)
 Γ |- \x.M ⇒ \x:τ.E : τ->τ'

 Γ |- M ⇒ E : τ->τ'  Γ |- N ⇒ F : τ
-------------------------------------------        (APP)
        Γ |- M N ⇒ E F : τ'

   Γ |- M ⇒ E : σ  Γ{x:σ} |- N ⇒ F : τ
-------------------------------------------------  (LET)
 Γ |- let x = M in N ⇒ let x:σ = E in F : τ

Core-MLからCore-XMLへの変換例：
let id = \x.x in id id
=>
let id:Πt.t->t = \<t>.\x:t.x in id <X->X> (id <X>)

    ※ 変換例は R.Harper, J.C.Mithcell, "On the Type Structure of
    Standard ML", 1993.にもとづく（少し改変）

(Core-XMLの型レベル評価)

評価文脈:
C ::= []
    | E C | C F
    | let x:σ = C in F
    | \x:τ.C

簡約規則: E→F,θ                          // θは変数の置換
- (\<t>.E) <τ> → E[t:=τ],id
- let x:Πt.σ = V in F → F[x:=V],id      // Vは簡約基を含まないCore-XML項

   E→F,θ
--------------
 C[E]⇒θC[F]

*⇒は⇒の推移反射閉包(transitive-reflective-closure)

let id:Πt.t->t = \<t>.\x:t.x in id <X->X> (id <X>)
=>
(\<t>.\x:t.x) <X->X> ((\<t>.\x:t.x) <X>)
=>
\x:<X->X>.x) (\x:<X>.x)

 Γ |- M ⇒ E : σ、かつ、E*⇒F,θ
-----------------------------------
          M ---> V : θτ
あるいは [[M]]ρ ≠ wrong

あいまいさは？

M ---> wrong

型レベルで評価したものは、そのまま実行しない
M⇒E; E→F,θ

θEを実行する(副作用が問題になる場合)


【参考文献】

[1] L.Damas & R.Milner, "Principal type schemes for functional
programs", POPL 1982.

[2] R.Milner, "A theory of type polymorphism in programming",
J.Comp.Sys.Sci,Vol.17(3),1978.

[3] S.Kaes, "Type inference in the presence of overloading, subtyping
and recursive types", ACM LISP&F.P.,1992.

[4] S.R.Thatte, "Semantics of type classes revisited", LISP94, 1994.

[5] J.C.Mitchell & R. Harper, "The essence of ML", POPL93, 1993.

[6] M.Odersky,P.Wadler,M.Wehr, "A second look at overloading", FPCA95,
1995.

[7] P.Wadler&S.Blott, "How to make ad-hoc polymorphism less ad-hoc",
POPL89, 1989.

[8] A.Ohori, "A polymorphic record calculus and its compilation", ACM
Trans.prog.lang.sys., Vol.17(6), 1995.

[9] D.Remy, "Type inference for records in a natural extension of ML",
Theor.Asp.OOP, 97-96, MIT Press, 1994.
